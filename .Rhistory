data <- data %>%
rbind(p12) %>%
rbind(p13) %>%
rbind(p23)
# Plot points
ggplot() +
geom_point(aes(x, y), data) +
#geom_circle(aes(x0 = x, y0 = y, r = r, fill = NULL), data, size = 0.1) +
geom_polygon(aes(x, y), data %>% top_n(3), fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 2, 4), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 2, 4), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 3, 5), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(2, 3, 6), ], fill = NA, colour = "black", size = 0.1) +
coord_fixed() +
theme_tufte() +
labs(x = NULL, y = NULL) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "null"))
# Load packages
library(ggforce)
library(ggplot2)
library(ggthemes)
library(dplyr)
# Create three random points
set.seed(5)
data <- data.frame(x = runif(3), y = runif(3), r = 0.2)
a <- 1 / 2
b <- sqrt(3) / 2
p12 <- c(a * (data$x[1] - data$x[2]) - b * (data$y[1] - data$y[2]) + data$x[2],
b * (data$x[1] - data$x[2]) + a * (data$y[1] - data$y[2]) + data$y[2], 0)
p13 <- c(b * (-data$x[1] - data$x[3]) + a * (data$y[1] - data$y[3]) + data$x[3],
a * (data$x[1] - data$x[3]) - b * (data$y[1] - data$y[3]) + data$y[3], 0)
p23 <- c(a * (data$x[2] - data$x[3]) - b * (data$y[2] - data$y[3]) + data$x[3],
b * (data$x[2] - data$x[3]) + a * (data$y[2] - data$y[3]) + data$y[3], 0)
data <- data %>%
rbind(p12) %>%
rbind(p13) %>%
rbind(p23)
# Plot points
ggplot() +
geom_point(aes(x, y), data) +
#geom_circle(aes(x0 = x, y0 = y, r = r, fill = NULL), data, size = 0.1) +
geom_polygon(aes(x, y), data %>% top_n(3), fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 2, 4), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 2, 4), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 3, 5), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(2, 3, 6), ], fill = NA, colour = "black", size = 0.1) +
coord_fixed() +
theme_tufte() +
labs(x = NULL, y = NULL) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "null"))
# Load packages
library(ggforce)
library(ggplot2)
library(ggthemes)
library(dplyr)
# Create three random points
set.seed(5)
data <- data.frame(x = runif(3), y = runif(3), r = 0.2)
a <- 1 / 2
b <- sqrt(3) / 2
p12 <- c(a * (data$x[1] - data$x[2]) - b * (data$y[1] - data$y[2]) + data$x[2],
b * (data$x[1] - data$x[2]) + a * (data$y[1] - data$y[2]) + data$y[2], 0)
p13 <- c(b * (data$x[1] - data$x[3]) + a * (data$y[1] - data$y[3]) + data$x[3],
a * (data$x[1] - data$x[3]) - b * (data$y[1] - data$y[3]) + data$y[3], 0)
p23 <- c(a * (data$x[2] - data$x[3]) - b * (data$y[2] - data$y[3]) + data$x[3],
b * (data$x[2] - data$x[3]) + a * (data$y[2] - data$y[3]) + data$y[3], 0)
data <- data %>%
rbind(p12) %>%
rbind(p13) %>%
rbind(p23)
# Plot points
ggplot() +
geom_point(aes(x, y), data) +
#geom_circle(aes(x0 = x, y0 = y, r = r, fill = NULL), data, size = 0.1) +
geom_polygon(aes(x, y), data %>% top_n(3), fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 2, 4), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 2, 4), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(1, 3, 5), ], fill = NA, colour = "black", size = 0.1) +
geom_polygon(aes(x, y), data[c(2, 3, 6), ], fill = NA, colour = "black", size = 0.1) +
coord_fixed() +
theme_tufte() +
labs(x = NULL, y = NULL) +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "null"))
library(ggplot2)
library(dplyr)
library(ggthemes)
library(gridExtra)
library(gganimate)
library(ggforce)
library(tweenr)
set.seed(111)
thm <- theme(line = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "null"),
axis.title = element_blank(),
axis.text = element_blank(),
text = element_blank(),
legend.position = "none",
legend.margin=unit(0, "null"),
panel.background = element_blank(),
panel.border=element_blank(),
panel.grid = element_blank(),
panel.margin=unit(c(0,0,0,0), "null"),
plot.background = element_blank(),
plot.margin=unit(c(0,0,0,0), "null"),
strip.text = element_blank())
m <- 150
n <- 10
a <- 10
b <- a / 15
make_ring <- function(xc, yc, index) {
data <- data.frame(x = 0, y = 0, group = 0)
for (i in 1:m) {
dx <- ifelse(runif(1) < 0.5, -1, 1) * b * runif(1)
dy <- ifelse(runif(1) < 0.5, -1, 1) * b * runif(1)
temp <- data.frame(angle = runif(n, 0, 2 * pi)) %>%
mutate(x = a * cos(angle) + dx^2 + xc,
y = a * sin(angle) + dy^2 + yc, group = i + index*100) %>%
arrange(angle) %>%
select(x, y, group)
data <- rbind(data, temp)
}
return(data)
}
c <- 60
data <- rbind(make_ring(0, 0, 1),
make_ring(runif(1)*c, 0, 2),
make_ring(0, runif(1)*c, 3),
make_ring(runif(1)*c, runif(1)*c, 4),
make_ring(runif(1)*c, runif(1)*c, 5),
make_ring(runif(1)*c, runif(1)*c, 6))
data1 <- data
set.seed(113)
thm <- theme(line = element_blank(),
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "null"),
axis.title = element_blank(),
axis.text = element_blank(),
text = element_blank(),
legend.position = "none",
legend.margin=unit(0, "null"),
panel.background = element_blank(),
panel.border=element_blank(),
panel.grid = element_blank(),
panel.margin=unit(c(0,0,0,0), "null"),
plot.background = element_blank(),
plot.margin=unit(c(0,0,0,0), "null"),
strip.text = element_blank())
m <- 150
n <- 10
a <- 10
b <- a / 15
make_ring <- function(xc, yc, index) {
data <- data.frame(x = 0, y = 0, group = 0)
for (i in 1:m) {
dx <- ifelse(runif(1) < 0.5, -1, 1) * b * runif(1)
dy <- ifelse(runif(1) < 0.5, -1, 1) * b * runif(1)
temp <- data.frame(angle = runif(n, 0, 2 * pi)) %>%
mutate(x = a * cos(angle) + dx^2 + xc,
y = a * sin(angle) + dy^2 + yc, group = i + index*100) %>%
arrange(angle) %>%
select(x, y, group)
data <- rbind(data, temp)
}
return(data)
}
c <- 60
data <- rbind(make_ring(0, 0, 1),
make_ring(runif(1)*c, 0, 2),
make_ring(0, runif(1)*c, 3),
make_ring(runif(1)*c, runif(1)*c, 4),
make_ring(runif(1)*c, runif(1)*c, 5),
make_ring(runif(1)*c, runif(1)*c, 6))
df <- list(data1, data2)
tf <- tween_states(df, tweenlength = 2, statelength = 1,
ease = "cubic-in-out",
nframes = 65)
p <- ggplot(tf, aes(x, y, group = group)) +
geom_polygon(aes(frame = .frame), fill = NA, colour = "black", size = 0.05, alpha = 0.2) + thm + coord_equal()
animation::ani.options(interval = 1/15)
gg_animate(p, "ringstransition.gif", title_frame = FALSE, ani.width = 400,
ani.height = 400)
data2 <- data
df <- list(data1, data2)
tf <- tween_states(df, tweenlength = 2, statelength = 1,
ease = "cubic-in-out",
nframes = 65)
p <- ggplot(tf, aes(x, y, group = group)) +
geom_polygon(aes(frame = .frame), fill = NA, colour = "black", size = 0.05, alpha = 0.2) + thm + coord_equal()
animation::ani.options(interval = 1/15)
gg_animate(p, "ringstransition.gif", title_frame = FALSE, ani.width = 400,
ani.height = 400)
tf <- tween_states(df, tweenlength = 2, statelength = 1,
ease = "cubic-in-out",
nframes = 60)
p <- ggplot(tf, aes(x, y, group = group)) +
geom_polygon(aes(frame = .frame), fill = NA, colour = "black", size = 0.05, alpha = 0.2) + thm + coord_equal()
animation::ani.options(interval = 1/15)
gg_animate(p, "ringstransition.gif", title_frame = FALSE, ani.width = 400,
ani.height = 400)
df <- data.frame(x1 = runif(100), y1 = runif(100), x2 = runif(100), y2 = runif(100))
ggplot(df, aes(x1 = x1, x2 = x2, y1 = y1, y2 = y2)) + geom_curve()
library(ggplot2)
ggplot(df, aes(x1 = x1, x2 = x2, y1 = y1, y2 = y2)) + geom_curve()
ggplot(df, aes(x = x, xend = x2, y = y1, yend = y2)) + geom_curve()
ggplot(df, aes(x = x1, xend = x2, y = y1, yend = y2)) + geom_curve()
ggplot(df, aes(x = x1, xend = x2, y = 0, yend = 0)) + geom_curve()
ggplot(df, aes(x = x1, xend = x2, y = 0, yend = 0)) + geom_segment()
ggplot(df, aes(x = x1, xend = x2, y = y1, yend = y2)) + geom_segment()
library(gganimate)
library(dplyr)
library(ggforce)
library(ggplot2)
library(tidyr)
set.seed(101)
n <- 20 # number of rows
m <- 32 # number of columns
df <- data.frame(row = rep(1:n, times  = m), col = rep(1:m, each = n)) %>%
rowwise() %>%
mutate(state = ifelse(runif(1) < 0.5, 0, 1))
#   mutate(state = 0)
#
# df$state[(df$row == 10 & df$col == 10)] <- 1
# df$state[(df$row == 11 & df$col == 10)] <- 1
# df$state[(df$row == 12 & df$col == 10)] <- 1
# df$state[(df$row == 12 & df$col == 9)] <- 1
# df$state[(df$row == 11 & df$col == 8)] <- 1
K <- 4
for (k in 4:K) {
for (i in 1:nrow(df)) {
row_i <- df$row[i]
col_i <- df$col[i]
state_i <- df[i, k-1]
state_new <- state_i
temp <- df %>% filter((row == (row_i-1) | row == row_i | (row == row_i+1)) &
(col == (col_i-1) | col == col_i | (col == col_i+1)) &
!((row == row_i) & (col == col_i))) %>%
replace(is.na(.), 0)
live_neighbours <- sum(temp[, k-1])
if ((state_i > 0) & (live_neighbours < 2)) {
state_new <- 0
} else if ((state_i > 0) & ((live_neighbours == 2) | (live_neighbours == 3))) {
state_new <- 1
} else if ((state_i > 0) & (live_neighbours > 3)) {
state_new <- 0
} else if ((state_i < 1) & (live_neighbours == 3)) {
state_new <- 1
}
#Any live cell with fewer than two live neighbours dies, as if caused by under-population.
#Any live cell with two or three live neighbours lives on to the next generation.
#Any live cell with more than three live neighbours dies, as if by over-population.
#Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
df[i, k] <- state_new
print(k)
}
}
names(df) <- c("row", "col", sprintf("%02s", 1:(ncol(df)-2)))
df <- df %>%
gather(frame, state, 3:ncol(.))
p <- ggplot(df) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
gg_animate(p, "gameoflife.gif", interval = 0.1, title_frame = FALSE, ani.width=1600*5/7.6, ani.height=1000*5/7.6)
ggplot(df) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
ggplot(df) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
#theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
setwd("~/projects/datavis/gameoflife")
library(gganimate)
library(dplyr)
library(ggforce)
library(ggplot2)
library(tidyr)
set.seed(101)
n <- 40 # number of rows
m <- 64 # number of columns
df <- data.frame(row = rep(1:n, times  = m), col = rep(1:m, each = n)) %>%
rowwise() %>%
mutate(state = ifelse(runif(1) < 0.5, 0, 1))
#   mutate(state = 0)
#
# df$state[(df$row == 10 & df$col == 10)] <- 1
# df$state[(df$row == 11 & df$col == 10)] <- 1
# df$state[(df$row == 12 & df$col == 10)] <- 1
# df$state[(df$row == 12 & df$col == 9)] <- 1
# df$state[(df$row == 11 & df$col == 8)] <- 1
K <- 200
for (k in 4:K) {
for (i in 1:nrow(df)) {
row_i <- df$row[i]
col_i <- df$col[i]
state_i <- df[i, k-1]
state_new <- state_i
temp <- df %>% filter((row == (row_i-1) | row == row_i | (row == row_i+1)) &
(col == (col_i-1) | col == col_i | (col == col_i+1)) &
!((row == row_i) & (col == col_i))) %>%
replace(is.na(.), 0)
live_neighbours <- sum(temp[, k-1])
if ((state_i > 0) & (live_neighbours < 2)) {
state_new <- 0
} else if ((state_i > 0) & ((live_neighbours == 2) | (live_neighbours == 3))) {
state_new <- 1
} else if ((state_i > 0) & (live_neighbours > 3)) {
state_new <- 0
} else if ((state_i < 1) & (live_neighbours == 3)) {
state_new <- 1
}
#Any live cell with fewer than two live neighbours dies, as if caused by under-population.
#Any live cell with two or three live neighbours lives on to the next generation.
#Any live cell with more than three live neighbours dies, as if by over-population.
#Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
df[i, k] <- state_new
print(k)
}
}
names(df) <- c("row", "col", sprintf("%02s", 1:(ncol(df)-2)))
df <- df %>%
gather(frame, state, 3:ncol(.))
p <- ggplot(df) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
#theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
gg_animate(p, "gameoflife.gif", interval = 0.1, title_frame = FALSE, ani.width=1600*5/7.6, ani.height=1000*5/7.6)
View(df)
sprintf("%03s", "99")
sprintf("%03s", "101")
df <- df <- mutate(frame = sprintf("%03s", .$frame))
df <- df %>% mutate(frame = sprintf("%03s", .$frame))
p <- ggplot(df) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
#theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
gg_animate(p, "gameoflife.gif", interval = 0.1, title_frame = FALSE, ani.width=1600*5/7.6, ani.height=1000*5/7.6)
p <- ggplot(df[1:(nrow(df)/3), ]) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
#theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
gg_animate(p, "gameoflife_.gif", interval = 0.1, title_frame = FALSE, ani.width=1600*5/7.6, ani.height=1000*5/7.6)
p <- ggplot(df[1:(nrow(df)*0.3), ]) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
#theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
gg_animate(p, "gameoflife_.gif", interval = 0.1, title_frame = FALSE, ani.width=1600*5/7.6, ani.height=1000*5/7.6)
p <- ggplot(df[1:(nrow(df)*0.28), ]) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
#theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
gg_animate(p, "gameoflife_.gif", interval = 0.1, title_frame = FALSE, ani.width=1600*5/7.6, ani.height=1000*5/7.6)
p <- ggplot(df[1:(nrow(df)*0.75), ]) +
geom_tile(aes(col, row, width = 1, height = 1,
fill = factor(state), frame = frame), colour = "white", size = 0.1) +
coord_equal() +
scale_fill_manual(name = NULL, values = c("0" = "lightgray", "1" = "black"), labels = c("dead", "alive")) +
#theme_no_axes() +
theme(panel.border = element_blank(), legend.position = "none") +
theme(panel.background=element_rect(fill = "transparent",colour = NA)) +
theme(plot.background=element_rect(fill = "transparent",colour = NA)) +
theme(panel.grid=element_blank()) +
theme(panel.border=element_blank()) +
theme(plot.margin=unit(c(0,0,0,0), "null")) +
theme(panel.margin=unit(c(0,0,0,0), "null")) +
theme(axis.ticks=element_blank()) +
theme(axis.text=element_blank()) +
theme(axis.title=element_blank()) +
theme(axis.line=element_blank()) +
theme(legend.position="none") +
theme(axis.ticks.length=unit(0, "null")) +
theme(legend.margin=unit(0, "null"))
gg_animate(p, "gameoflife_.gif", interval = 0.1, title_frame = FALSE, ani.width=800, ani.height=500)
gg_animate(p, "gameoflife_.gif", interval = 0.1, title_frame = FALSE, ani.width=800*5/8.5, ani.height=500*5/8.5)
5/8.5
gg_animate(p, "gameoflife_.gif", interval = 0.1, title_frame = FALSE, ani.width=800*0.5, ani.height=500*0.5)
gg_animate(p, "gameoflife_.gif", interval = 0.1, title_frame = FALSE, ani.width=800*0.525, ani.height=500*0.525)
